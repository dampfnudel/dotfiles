#          ▄███████▄     ▄████████    ▄█    █▄       ▄████████  ▄████████
#         ██▀     ▄██   ███    ███   ███    ███     ███    ███ ███    ███
#               ▄███▀   ███    █▀    ███    ███     ███    ███ ███    █▀
#          ▀█▀▄███▀▄▄   ███         ▄███▄▄▄▄███▄▄  ▄███▄▄▄▄██▀ ███
#           ▄███▀   ▀ ▀███████████ ▀▀███▀▀▀▀███▀  ▀▀███▀▀▀▀▀   ███
#         ▄███▀                ███   ███    ███   ▀███████████ ███    █▄
# ████    ███▄     ▄█    ▄█    ███   ███    ███     ███    ███ ███    ███
# ████     ▀████████▀  ▄████████▀    ███    █▀      ███    ███ ████████
#                                                   ███    ███

# ASCII-Art credits: http://patorjk.com/software/taag/#p=display&f=Delta%20Corps%20Priest%201&t=.zshrc

# zsh configs
# {
    # enable vcs_info used by the prompt
    autoload -Uz vcs_info
    zstyle ':vcs_info:*' enable git svn
    precmd() {
        vcs_info
    }

    # colored dirs
    alias dircolors='gdircolors'
    # @mbp {
        eval `dircolors /Users/mbayer/Settings/ColorSchemes/monobay.256dark`
    # }
    # @imb {
        # eval `dircolors utilities/dircolors-monobay/monobay.256dark`
    # }

    # unset mailcheck, spellcheck
    unset MAILCHECK
    unsetopt correct_all

    # enable dirstack
    # use:
    # $ dirs
    # $ 7
    DIRSTACKFILE="$HOME/.zsh/dirstack"
    if [[ -f $DIRSTACKFILE ]] && [[ $#dirstack -eq 0 ]]; then
      dirstack=( ${(f)"$(< $DIRSTACKFILE)"} )
      [[ -d $dirstack[1] ]] && cd $dirstack[1]
    fi
    chpwd() {
      print -l $PWD ${(u)dirstack} >$DIRSTACKFILE
    }

    DIRSTACKSIZE=20
    setopt autopushd pushdsilent pushdtohome

    ## Remove duplicate entries
    setopt pushdignoredups

    ## This reverts the +/- operators.
    setopt pushdminus

# }


# oh-my-zsh configs
# {

    ZSH=$HOME/.oh-my-zsh
    ZSH_THEME="bay"
    #ZSH_THEME="random"
    CASE_SENSITIVE="true"
    COMPLETION_WAITING_DOTS="true"

    plugins=(gradle osx brew git git-flow python pip fabric zsh-syntax-highlighting zshmarks)


# }

# welcome (executed on session start)
# {

    # Fortune Ponies welcomes you
    # @mbp {
        fortune | ponysay
    # }

# }

# environment
# {

    source $ZSH/oh-my-zsh.sh

    # @mbp {
        export PATH="/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/mbayer/bin:$PATH"
    # }

    export TERM=xterm-256color

    if [[ -n $SSH_CONNECTION ]]; then
      export EDITOR='vim'
    else
      export EDITOR='mvim'
    fi

    export HOME=/Users/mbayer
    export LANG=de_DE.UTF-8
    export LC_ALL=de_DE.UTF-8
    # zshmarks bookmarks folder
    export BOOKMARKS_FILE="/Users/mbayer/.oh-my-zsh/custom/plugins/zshmarks/.bookmarks"

# }

# python
# {

    path=(
        $path
        /usr/bin/python
        # @mbp {
            /usr/local/bin/python3
        # }
        # @imb {
            # /usr/local/bin/python
        # }
    )

    # virtualenv
    # @mbp {
        export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
        export PROJECT_HOME=$HOME/Workspace
        export WORKON_HOME=$HOME/Workspace/Envs
        export VIRTUALENV_ROOT=$WORKON_HOME
        source /usr/local/bin/virtualenvwrapper.sh

        # fix the new tab = virtual_env dir bug
        if [[ "$PWD" == "/Users/mbayer/Workspace/Envs" ]]; then
            cd - > /dev/null
        fi
        # set default virtual_env
        if [[ $(basename "$VIRTUAL_ENV") == "" ]]
        then
            local virtualenv_default_path="/Users/mbayer/Workspace/Envs/python2.7.5/bin/activate"
            if [[ -f "$virtualenv_default_path" ]]; then
                source "$virtualenv_default_path"
            fi
        fi
    # }
    # @imb {
        # export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python
        # export PROJECT_HOME=$HOME/develop
        # export WORKON_HOME=$HOME/.virtualenvs
        # export VIRTUALENV_ROOT=$WORKON_HOME
        # source /usr/local/bin/virtualenvwrapper.sh
    # }

# }

# docker
# {
    $(boot2docker shellinit 2> /dev/null)
    export DOCKER_HOST=tcp://192.168.59.103:2376
    export DOCKER_CERT_PATH=/Users/mbayer/.boot2docker/certs/boot2docker-vm
    export DOCKER_TLS_VERIFY=1
# }

# keybindings
# {
    bindkey '\e[A' history-beginning-search-backward
    bindkey '\e[B' history-beginning-search-forward
# }

# aliases
# {
    alias j='jump'
    alias ls='gls --color=auto'
    alias la="ls -la"
    alias ll="ls -lah"
    alias l="ls -lah"
    alias lh='ls -lah'                # human readable (sizes) long and all ;-)
    alias lls='ls -l -h -g -F --color=auto'
    alias lc='ls -aCF'
    alias lsam='ls -am'               # List files horizontally
    alias lr='ls -lR'                 # recursive
    alias lsx='ls -ax'                # sort right to left rather then in columns
    alias lss='ls -shaxSr'            # sort by size
    alias lt='ls -latr'               # sort by date
    alias lm='ls -al |more'           # pipe through 'more'
    alias grep='grep --color'
    alias df='df -h'
    alias zfg="./bin/instance fg;stty sane"
    alias zfb="./bin/buildout -v"
    alias tvim="mvim --remote-tab-silent"
    alias doch='su -c "$(history -p !-1)"'
    alias wtf='printf "¯\_(ツ)_/¯"'
    alias trash="rm -rf ~/.Trash/."
    alias printip='ifconfig | grep "inet " | grep -v 127.0.0.1 | cut -d\  -f2'
    alias dirs='dirs -vp'
    # find all .git directories and exec "git pull" on the parent.
    alias gprec='find . -name .git -exec sh -c "cd \"{}\"/../ && pwd && git pull" \;'
    alias git_ignore_del='git ls-files --deleted -z | git update-index --assume-unchanged -z --stdin'

    # Directory navigation aliases
    alias ..='cd ..'
    alias ...='cd ../..'
    alias ....='cd ../../..'
    alias .....='cd ../../../..'
    alias ......='cd ../../../../..'
    alias .......='cd ../../../../../..'
    alias ........='cd ../../../../../../..'
    alias .........='cd ../../../../../../../..'

    # Services
    # @mbp {
        alias etb='cd /Users/mbayer/Workspace/eventicker/eventicker-rdbms && ./bin/buildout -c develop.cfg && cd -'
        alias etp='/Users/mbayer/Workspace/eventicker/eventicker-postgres/bin/supervisord && cd -'
        alias etd='/Users/mbayer/Workspace/eventicker/eventicker-rdbms/bin/start_django && cd -'
        alias ete='/Users/mbayer/Workspace/eventicker/elasticsearch-1.0.0/bin/elasticsearch && cd -'
        alias etf='/Users/mbayer/Workspace/etfetcher/bin/celery -A etfetcher.worker.tasks worker -P eventlet --loglevel=warning -c 1 --hostname=markus.bayer@inquant.de && cd -'
        alias etff='/Users/mbayer/Workspace/etfetcher/bin/flask_server && cd -'
        alias etfwp='/Users/mbayer/Workspace/etfetcher/bin/worker_fetch_events_place && cd -'
        alias dlt='/Users/mbayer/Workspace/doclistgenerator/buildout/bin/start_trac; tty sane'
    # }
    # @imb {
        # alias etb='cd /Users/mbayer/Develop/eventicker/eventicker-rdbms && ./bin/buildout -c develop.cfg && cd -'
        # alias etp='/Users/mbayer/Develop/eventicker/eventicker-postgres/bin/supervisord && cd -'
        # alias etd='/Users/mbayer/Develop/eventicker/eventicker-rdbms/bin/start_django && cd -'
        # alias ete='/Users/mbayer/Develop/elasticsearch-1.0.0/bin/elasticsearch && cd -'
        # alias etf='/Users/mbayer/Develop/etfetcher/bin/celery -A etfetcher.worker.tasks worker -P eventlet --loglevel=warning -c 1 --hostname=markus.bayer@inquant.de && cd -'
        # alias etff='/Users/mbayer/Develop/etfetcher/bin/flask_server && cd -'
        # alias etfwp='/Users/mbayer/Develop/etfetcher/bin/worker_fetch_events_place && cd -'
        # alias va='cd ~/Develop/termxplorer && vagrant up && cd -'
        # alias vassh='cd ~/Develop/termxplorer && vagrant ssh && cd -'
    # }

    # files
    alias zshrc='mvim --remote-tab-silent ~/.zshrc'
    alias vimrc='mvim --remote-tab-silent ~/.vimrc'

    # numFiles: number of (non-hidden) files in current directory
    alias numFiles='echo $(ls -1 | wc -l)'

    alias fix_win="/usr/bin/perl -i -pe's/\r$//'"

    # rm_DS_Store_files: removes all .DS_Store file from the current dir and below
    alias macrip='find . -name .DS_Store -exec rm {} \; && find . -name ._.DS_Store -exec rm {} \;'
    alias clean_svn='find ./ -type d -name ".svn" -exec rm -Rf {} \;'
    alias clean_pyc='find ./ -type f -name "*.pyc" -exec rm -Rf {} \;'
    alias rm_DS_Store_files='find . -name .DS_Store -exec rm {} \;'
    alias rm_pyc_files='find . -name "*.pyc" -exec rm {} \;'
    alias rm_svn_files='find . -type d -name .svn -exec rm -rf {} \;'

    # mac
    alias show_hidden='defaults write com.apple.Finder AppleShowAllFiles YES && killall Finder'
    alias hide_hidden='defaults write com.apple.Finder AppleShowAllFiles NO && killall Finder'
# }

# functions
# {
    # open files from asgard
    ethervim () {
        mvim -c "echo :set buftype: \" \"" --remote-tab-silent scp://root@134.119.32.216:4022//"$@"
    }

    # showTimes: show the modification, metadata-change, and access times of a file
    showtimes () { stat -f "%N:   %m %c %a" "$@" ; }

    # zipf: to create a ZIP archive of a file or folder
    zipf () { zip -r "$1".zip "$1" ; }

    # searching
    # ff:  to find a file under the current directory
    ff () { /usr/bin/find . -name "$@" ; }

    # ffs: to find a file whose name starts with a given string
    ffs () { /usr/bin/find . -name "$@"'*' ; }

    # ffe: to find a file whose name ends with a given string
    ffe () { /usr/bin/find . -name '*'"$@" ; }

    # fd: find a directory
    fd () { /usr/bin/find . -type d -name '*'"$@" ; }

    # grepfind: to grep through files found by find, e.g. grepf pattern '*.c'
    # note that 'grep -r pattern dir_name' is an alternative if want all files
    grepfind () { find . -type f -name "$2" -print0 | xargs -0 grep "$1" ; }

    # locatemd: to search for a file using Spotlight's metadata
    function finder { mdfind "kMDItemDisplayName == '$@'wc"; }

    # finderComment: show the SpotLight comment for a file
    findercomment () { mdls "$1" | grep kMDItemFinderComment ; }

    # locaterecent: to search for files created since yesterday using Spotlight
    # This is an illustration of using $time in a query
    # See: http://developer.apple.com/documentation/Carbon/Conceptual/SpotlightQuery/index.html
    function findrecent { mdfind 'kMDItemFSCreationDate >= $time.yesterday'; }

    # list_all_apps: list all applications on the system
    list_all_apps() { mdfind 'kMDItemContentTypeTree == "com.apple.application"c' ; }

    # find_larger: find files larger than a certain size (in bytes)
    find_larger() { find . -type f -size +${1}c ; }

    # findword: search for a word in the Unix word list
    findword () { /usr/bin/grep ^"$@"$ /usr/share/dict/words ; }

    # requires: pip install dict.cc.py
    # lookup dict.cc for german words
    de () { /Users/mbayer/Utils/dict.cc.py/dict.cc.py de en "$1"; }
    # lookup dict.cc for english words
    en () { /Users/mbayer/Utils/dict.cc.py/dict.cc.py en de "$1"; }

    # copy the current working dir to clipboard
    cwd() { pwd | pbcopy }

    # serve wd
    serve () {
        printip
        python -m SimpleHTTPServer
    }

    # count files
    function count () {
        for dir in $( find . -type d -print ); do files=$( find $dir -maxdepth 1 -type f | wc -l ); echo "$dir : $files"; done
    }

    # extract an archive
    # {
        extract () {
            if [ -f $1 ] ; then
                case $1 in
                    *.tar.bz2)  tar xjf $1      ;;
                    *.tar.gz)   tar xzf $1      ;;
                    *.bz2)      bunzip2 $1      ;;
                    *.rar)      rar x $1        ;;
                    *.gz)       gunzip $1       ;;
                    *.tar)      tar xf $1       ;;
                    *.tbz2)     tar xjf $1      ;;
                    *.tgz)      tar xzf $1      ;;
                    *.zip)      unzip $1        ;;
                    *.Z)        uncompress $1   ;;
                    *)          echo "'$1' cannot be extracted via extract()" ;;
            esac
            else
                echo "'$1' is not a valid file"
            fi
        }
    # }

    # show available color codes
    # {
        typeset -Ag FX FG BG

        FX=(
            reset     "%{[00m%}"
            bold      "%{[01m%}" no-bold      "%{[22m%}"
            italic    "%{[03m%}" no-italic    "%{[23m%}"
            underline "%{[04m%}" no-underline "%{[24m%}"
            blink     "%{[05m%}" no-blink     "%{[25m%}"
            reverse   "%{[07m%}" no-reverse   "%{[27m%}"
        )

        for color in {000..255}; do
            FG[$color]="%{[38;5;${color}m%}"
            BG[$color]="%{[48;5;${color}m%}"
        done

        ZSH_SPECTRUM_TEXT=${ZSH_SPECTRUM_TEXT:-Arma virumque cano Troiae qui primus ab oris}

        # Show all 256 colors with color number
        function spectrum_ls() {
          for code in {000..255}; do
            print -P -- "$code: %F{$code}$ZSH_SPECTRUM_TEXT%f"
          done
        }

        # Show all 256 colors where the background is set to specific color
        function spectrum_bls() {
          for code in {000..255}; do
            print -P -- "$BG[$code]$code: $ZSH_SPECTRUM_TEXT %{$reset_color%}"
          done
        }
    # }

    # tab completion for commands (input from last command)
    # {
        _prev-result () {
            hstring=$(eval `fc -l -n -1`)
            set -A hlist ${(@s/
/)hstring}
            compadd - ${hlist}
        }

        zle -C prev-comp menu-complete _prev-result
        # use with <esc>e:
        # find . -name "settings.py.*"
        # vim <Esc>e<Tab>
        bindkey '\ee' prev-comp
    # }

    # toggle show/hide hidden files in finder
    # {
        hidden_finder () {
            isVisible=$(defaults read com.apple.finder AppleShowAllFiles)

            # toggle visibility based on variables value
            if [ ${isVisible} = FALSE ]
            then
                defaults write com.apple.finder AppleShowAllFiles TRUE
            else
                defaults write com.apple.finder AppleShowAllFiles FALSE
            fi

            # force changes by restarting Finder
            killall Finder
        }
    # }

    # show clock
    # {
        clock () {
            while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done &
        }
    # }

    # nyan cat
    function nyan () { telnet nyancat.dakko.us }

    # starwars
    function starwars () { telnet towel.blinkenlights.nl }

    # mandelbrot
    # {
        function mandelbrot () {
           local lines columns colour a b p q i pnew
           ((columns=COLUMNS-1, lines=LINES-1, colour=0))
           for ((b=-1.5; b<=1.5; b+=3.0/lines)) do
               for ((a=-2.0; a<=1; a+=3.0/columns)) do
                   for ((p=0.0, q=0.0, i=0; p*p+q*q < 4 && i < 32; i++)) do
                       ((pnew=p*p-q*q+a, q=2*p*q+b, p=pnew))
                   done
                   ((colour=(i/4)%8))
                    echo -n "\\e[4${colour}m "
                done
                echo
            done
        }
    # }

    # enter = ls && git status
    # {
        function do_enter() {
            if [ -n "$BUFFER" ]; then
                zle accept-line
                return 0
            fi
            echo
            ls
            if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
                echo
                echo -e "\e[0;33m--- git status ---\e[0m"
                git status -sb
            fi
            zle reset-prompt
            return 0
        }
        zle -N do_enter
        bindkey '^m' do_enter
    # }
# }

# # create a zkbd compatible hash;
# # to add other keys to this hash, see: man 5 terminfo
# typeset -A key
#
# key[Home]=${terminfo[khome]}
#
# key[End]=${terminfo[kend]}
# key[Insert]=${terminfo[kich1]}
# key[Delete]=${terminfo[kdch1]}
# key[Up]=${terminfo[kcuu1]}
# key[Down]=${terminfo[kcud1]}
# key[Left]=${terminfo[kcub1]}
# key[Right]=${terminfo[kcuf1]}
# key[PageUp]=${terminfo[kpp]}
# key[PageDown]=${terminfo[knp]}
#
# # setup key accordingly
# [[ -n "${key[Home]}"     ]]  && bindkey  "${key[Home]}"     beginning-of-line
# [[ -n "${key[End]}"      ]]  && bindkey  "${key[End]}"      end-of-line
# [[ -n "${key[Insert]}"   ]]  && bindkey  "${key[Insert]}"   overwrite-mode
# [[ -n "${key[Delete]}"   ]]  && bindkey  "${key[Delete]}"   delete-char
# [[ -n "${key[Up]}"       ]]  && bindkey  "${key[Up]}"       up-line-or-history
# [[ -n "${key[Down]}"     ]]  && bindkey  "${key[Down]}"     down-line-or-history
# [[ -n "${key[Left]}"     ]]  && bindkey  "${key[Left]}"     backward-char
# [[ -n "${key[Right]}"    ]]  && bindkey  "${key[Right]}"    forward-char
# [[ -n "${key[PageUp]}"   ]]  && bindkey  "${key[PageUp]}"   beginning-of-buffer-or-history
# [[ -n "${key[PageDown]}" ]]  && bindkey  "${key[PageDown]}" end-of-buffer-or-history
#
# # Finally, make sure the terminal is in application mode, when zle is
# # active. Only then are the values from $terminfo valid.
# if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
#     function zle-line-init () {
#         printf '%s' "${terminfo[smkx]}"
#     }
#     function zle-line-finish () {
#         printf '%s' "${terminfo[rmkx]}"
#     }
#     zle -N zle-line-init
#     zle -N zle-line-finish
# fi
#
#
# cdUndoKey() {
#   popd      > /dev/null
#   zle       reset-prompt
#   echo
#   ls
#   echo
# }
#
# cdParentKey() {
#   pushd .. > /dev/null
#   zle      reset-prompt
#   echo
#   ls
#   echo
# }
#
# zle -N                 cdParentKey
# zle -N                 cdUndoKey
# bindkey '^[[1;3A'      cdParentKey
# bindkey '^[[1;3D'      cdUndoKey

# vim: set ft=zsh ts=4 sw=4 expandtab :
