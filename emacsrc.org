#+AUTHOR: Markus Bayer
#+BABEL: :cache yes
#+DATE: <2016-06-03 Fr 18:35>
#+PROPERTY: header-args :tangle yes

   ███████╗███╗   ███╗ █████╗  ██████╗███████╗██████╗  ██████╗
   ██╔════╝████╗ ████║██╔══██╗██╔════╝██╔════╝██╔══██╗██╔════╝
   █████╗  ██╔████╔██║███████║██║     ███████╗██████╔╝██║
   ██╔══╝  ██║╚██╔╝██║██╔══██║██║     ╚════██║██╔══██╗██║
██╗███████╗██║ ╚═╝ ██║██║  ██║╚██████╗███████║██║  ██║╚██████╗
╚═╝╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚══════╝╚═╝  ╚═╝ ╚═════╝

ASCII-Art credits: http://patorjk.com/software/taag/#p=testall&h=0&v=0&f=ANSI%20Shadow&t=.emacsrc

* setup

** persistence files

#+BEGIN_SRC sh :tangle no
mkdir ~/.emacs.d/persistence
touch ~/.emacs.d/persistence/recentf
touch ~/.emacs.d/persistence/workgroups
touch ~/.emacs.d/persistence/places
touch ~/.emacs.d/persistence/bookmarks
# cp ~/.emacs.d/bookmarks ~/.emacs.d/persistence/bookmarks

git clone https://github.com/TeMPOraL/nyan-mode.git ~/.emacs.d/other-srcs
git clone https://github.com/alpaker/Fill-Column-Indicator.git ~/.emacs.d/other-srcs
git clone https://github.com/philiparvidsson/zweilight-emacs.git ~/.emacs.d/other-srcs
git clone https://github.com/dunn/company-emoji.git ~/.emacs.d/other-srcs
#+END_SRC

** external dependencies

#+BEGIN_SRC sh :tangle no
# silver searcher
brew install ag
# howdoi
pip install howdoi
# elpy
pip install jedi flake8 importmagic autopep8
# tern
npm install -g tern
# js2-mode
npm install -g jshint
npm install -g eslint
#+END_SRC

** jedi

M-x jedi:install-server

* package management

** packages

To load downloaded packages we need to
initialize =package=. =cl= is a library that contains many functions from
Common Lisp, and comes in handy quite often, so we want to make sure it's
loaded, along with =package=, which is obviously needed.

#+BEGIN_SRC emacs-lisp
(package-initialize)
(require 'package)
(require 'cl)
(setq package-enable-at-startup nil)
#+END_SRC

Setup package archives.

#+BEGIN_SRC emacs-lisp
(setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
         ("org" . "http://orgmode.org/elpa/")
         ("melpa" . "https://melpa.org/packages/")
         ("melpa-stable" . "https://stable.melpa.org/packages/")
         ; ("elpy" . "https://jorgenschaefer.github.io/packages/")
))

;; (add-to-list 'package-pinned-packages '(cider . "melpa-stable") t)
#+END_SRC

** install missing packages

add them to the packages list and call package-install-from-ini

#+BEGIN_SRC emacs-lisp
(defun package-install-from-ini ()
    (interactive)
    (let* ((packages
            '(auto-compile              ; automatically compile Emacs Lisp libraries
                evil                    ; extensible vi layer
                evil-leader             ; the <leader> feature from Vim
                evil-search-highlight-persist             ; highlight the search term in all buffers persistently
                evil-nerd-commenter     ; comment code efficiently
                helm                    ; Incremental and narrowing framework
                expand-region           ; Increases the selected region by semantic units
                yasnippet               ; template system
                flycheck                ; modern on-the-fly syntax checking extension
                git-gutter              ; icons in the gutter area indicating src ctrl changes
                undo-tree               ; undo system
                company                 ; auto completion with popup menu
                helm-c-yasnippet        ; helm completion for company-mode
                json-snatcher           ; extract the path to a json value, display at modeline
                fireplace               ; a cozy fireplace
                idle-require            ; load elisp libraries while Emacs is idle
                avy                     ; jumping to visible text using a char-based decision tree
                restclient              ; tool to manually explore and test HTTP REST webservices
                js2-mode                ; Improved JavaScript editing mode
                web-mode                ; major mode for editing web templates aka HTML files
                dumb-jump               ; "jump to definition" with support for multiple programming languages
                helm-swoop              ; Efficiently hopping squeezed lines
                smartparens             ; minor mode for dealing with pairs
                which-key               ; displays the key bindings following your currently entered incomplete command (a prefix) in a popup
                helm-projectile         ; Helm integration for Projectile
                magit                   ; control Git from Emacs
                spaceline               ; Spacemacs powerline theme
                workgroups2             ; session manager
                howdoi                  ; query Stack Overflow, get the most upvoted answer to the first question
                markdown-mode           ; major mode for editing markdown
                helm-ag                 ; use ag with helm
                focus                   ; Focus provides focus-mode that dims the text of surrounding sections
                anaconda-mode           ; Code navigation, documentation lookup and completion for Python
                company-anaconda        ; Anaconda backend for company-mode
                skewer-mode             ; Live web development
                company-tern            ; Tern backend for company-mode.
                ;; new package
                ;; themes
                rebecca-theme           ; dark
                gruvbox-theme           ; light & dark
                solarized-theme         ; light & dark
                spacemacs-theme         ; light & dark
                moe-theme               ; light & dark
                material-theme          ; light & dark
                color-theme-sanityinc-tomorrow ; light & dark
                darcula-theme           ; dark
                leuven-theme            ; light
                organic-green-theme     ; light
                monokai-theme           ; dark
                zenburn-theme           ; dark
                cyberpunk-theme         ; dark
                subatomic-theme         ; dark
                grandshell-theme        ; dark
                afternoon-theme         ; dark
                noctilux-theme          ; dark
                darktooth-theme         ; dark
                gotham-theme            ; dark
                doom-themes             ; light & dark
                spacegray-theme         ; dark
                obsidian-theme          ; dark
                metalheart-theme        ; dark
                badwolf-theme           ; light & dark
                inkpot-theme            ; dark
                seoul256-theme          ; dark
                suscolors-theme         ; dark
                avk-emacs-themes        ; collection
                quasi-monochrome-theme  ; dark
                hemisu-theme            ; light & dark
                cherry-blossom-theme    ; theme
                darkburn-theme          ; dark
                clues-theme             ; dark
                reykjavik-theme         ; dark
                sublime-themes          ; collection
                silkworm-theme          ; dark
                labburn-theme           ; dark
                org                     ; Outline-based notes management and organizer
                org-autolist            ; Automatically insert new list items.
                ;; always load finally
                ox-rst                  ; Export reStructuredText
                ox-odt                  ; Export OpenDocument
                ox-md                   ; Markdown exporter (from org)
                ;; cider                ; Clojure Interactive Development Environment
                ;; company              ; Modular text completion framework
                ;; define-word          ; display the definition of word at point
                ;; diminish             ; Diminished modes from modeline
                ;; drag-stuff           ; Drag stuff around in Emacs
                ;; expand-region        ; Increase selected region by semantic units
                ;; focus                ; Dim color of text in surrounding sections
                ;; geiser               ; GNU Emacs and Scheme talk to each other
                ;; git-gutter-fringe    ; Fringe version of git-gutter.el
                ;; golden-ratio         ; Automatic resizing windows to golden ratio
                ;; haskell-mode         ; A Haskell editing mode
                ;; helm-company         ; Helm interface for company-mode
                ;; maude-mode           ; Emacs mode for the programming language Maude
                ;; multiple-cursors     ; Multiple cursors for Emacs
                ;; olivetti             ; Minor mode for a nice writing environment
                ;; paredit              ; minor mode for editing parentheses
                ;; pdf-tools            ; Emacs support library for PDF files
                ;; projectile           ; Manage and navigate projects in Emacs easily
                ;; slime                ; Superior Lisp Interaction Mode for Emacs
                ; try))                ; Try out Emacs packages
                ))
            ;; Remove all packages already installed
            (packages (remove-if 'package-installed-p packages)))
        ;; TODO only connect if neccessary
        (when packages
            (ignore-errors (package-refresh-contents)
                        (mapc 'package-install packages)
                        ;; macOS
                        (when (memq window-system '(mac ns))
                            (package-install 'exec-path-from-shell))))))
#+END_SRC

* emacsrc.org setup

initial init.d content

#+BEGIN_SRC emacs-lisp :tangle no
;; require org for tangling
(require 'org)
;; open the configuration
(find-file (concat user-emacs-directory "emacsrc.org"))
;; tangle it
#+TITLE: Emacs configuration file
#+AUTHOR: Markus Bayer
#+BABEL: :cache yes
#+DATE: <2016-06-03 Fr 18:35>
#+PROPERTY: header-args
#+BEGIN_SRC emacs-lisp: tangle no
(org-babel-tangle)
;; load it
(load-file (concat user-emacs-directory "emacsrc.el"))
;; finally byte-compile it
(byte-compile-file (concat user-emacs-directory "emacsrc.el"))
#+END_SRC

always tangle and byte-compile the =org=-document after changes.

#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
"If the current buffer is 'init.org' the code-blocks are tangled, and
the tangled file is compiled."
(when (equal (buffer-file-name)
    (expand-file-name "~/Settings/dotfiles/emacsrc.org"))
    ;; avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
    (org-babel-tangle)
    (byte-compile-file (expand-file-name
        (concat user-emacs-directory "init.el"))))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC

* general

** load path

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name
    (concat user-emacs-directory "other-srcs/lisp")))
#+END_SRC

** theme

    #+BEGIN_SRC emacs-lisp
    ;; theme
    ;; trust theme
    (setq custom-safe-themes t)
    ;; (load-theme 'spacemacs-dark)
    ;; (load-theme 'spacemacs-light)
    ;; (load-theme 'rebecca)
    (load-theme 'zenburn)
    ;; (load-theme 'reykjavik)
    ;; (load-theme 'darcula)
    ;; (load-theme 'monokai)
    ;; (load-theme 'sanityinc-tomorrow-blue)
    ;; (load-theme 'darktooth)
    ;; set font
    (set-frame-font "Envy Code R 16")
    #+END_SRC

** symlinks

    #+BEGIN_SRC emacs-lisp
    ;; follow symbolic links
    ;; (setq vc-follow-symlinks t)
    #+END_SRC

** cursor

    #+BEGIN_SRC emacs-lisp
    ;; disable blinking cursor
    (blink-cursor-mode 0)
    ;; disable audio bell
    (setq ring-bell-function 'ignore)
    ;; remember cursor position
    (if (version< emacs-version "25.0")
        (progn
            (require 'saveplace)
      (setq-default save-place t))
      (setq save-place-file (concat user-emacs-directory "persistence/places"))
      (save-place-mode 1))
    #+END_SRC

** encryption
https://www.emacswiki.org/emacs/mc-auto-encrypt.el

#+BEGIN_SRC elisp
   (require 'epa-file)
   (custom-set-variables '(epg-gpg-program  "/usr/local/MacGPG2/bin/gpg2"))
#+END_SRC

** UI                                                               :manual:

    #+BEGIN_SRC emacs-lisp
    ;; disable welcome window
    (setq ns-pop-up-frames nil)

    ;; disable tool-bar
    (tool-bar-mode -1)

    ;; show line numbers
    (global-linum-mode t)

    ;; y & n instead of yes & no
    (fset 'yes-or-no-p 'y-or-n-p)

    ;; 80-column-ruler
    (add-to-list 'load-path (expand-file-name
        (concat user-emacs-directory "other-srcs/Fill-Column-Indicator")))
    (setq fci-rule-column 81)
    (require 'fill-column-indicator)

    ;; TODO define list of used programming languages (prog-mode doesn't work with js)
    (add-hook 'python-mode-hook 'turn-on-fci-mode)
    (add-hook 'js-mode-hook 'turn-on-fci-mode)

    ;; highlight current line
    (global-hl-line-mode)

    ;; wrap long lines
    (global-visual-line-mode)
    ;(set-default 'truncate-lines t)

    ;; start fullscreen
    ;(toggle-frame-maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized))
    #+END_SRC

*** modeline

    #+BEGIN_SRC emacs-lisp
    ;; display column number
    (setq column-number-mode t)
    #+END_SRC

*** frames

#+BEGIN_SRC emacs-lisp
;; switch frames with <Shift-Left/Right/Up/Down>
(windmove-default-keybindings)
#+END_SRC

** lines

no forced new line

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

** whitespace

    #+BEGIN_SRC emacs-lisp
    ;; show trailing whitespace
    (setq-default show-trailing-whitespace t)

    ;;; use 4 spaces instead of tabs
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)

   ;; (setq indent-line-function 'insert-tab)
    #+END_SRC

** encoding

    #+BEGIN_SRC emacs-lisp
    (set-language-environment "UTF-8")
    #+END_SRC

** paranthesis

    #+BEGIN_SRC emacs-lisp
    (show-paren-mode 1)
    (require 'paren)
    (set-face-background 'show-paren-match (face-background 'default))
    (set-face-foreground 'show-paren-match "#FF0097")
    (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
    (electric-pair-mode)
    #+END_SRC

** temporary files

    #+BEGIN_SRC emacs-lisp
    ;; paths
    (setq auto-save-file-name-transforms
              `((".*" ,(concat user-emacs-directory "tmp/auto-save/") t)))
    (setq backup-directory-alist
          `(("." . ,(expand-file-name
                     (concat user-emacs-directory "tmp/backup/")))))
    ;; backup method
    (setq backup-by-copying t)
    ;; backup frequency
    (setq delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)

    ;;TOTRY
    ;;(setq savehist-file "~/.emacs.d/savehist")
    ;;(savehist-mode 1)
    ;;(setq history-length t)
    ;;(setq history-delete-duplicates t)
    ;;(setq savehist-save-minibuffer-history 1)
    ;;(setq savehist-additional-variables
    ;;'(kill-ring
    ;;    search-ring
    ;;    regexp-search-ring))
    #+END_SRC

** file modes

map files to major-modes

#+BEGIN_SRC emacs-lisp
;; TODO shebangs, doesn't work
(add-to-list 'magic-mode-alist '("# vim: set ft=zsh ts=4 sw=4 expandtab :" . sh-mode))
(add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))
#+END_SRC

* packages

** bookmarks                                                       :builtin:

emacs throws the error "Not bookmark format" if the file is empty.
As a workaround let emacs create the file under the default path
and copy it over the desired file.

#+BEGIN_SRC emacs-lisp
;; persist bookmarks in this file
(setq bookmark-default-file (concat user-emacs-directory "persistence/bookmarks"))
#+END_SRC

** zone                                                            :builtin:

#+BEGIN_SRC emacs-lisp
;; required by require
(defun zone-choose (pgm)
    "Choose a PGM to run for `zone'."
    (interactive
        (list
        (completing-read
        "Program: "
        (mapcar 'symbol-name zone-programs))))
    (let ((zone-programs (list (intern pgm))))
        (zone)))
#+END_SRC

** evil-leader

#+BEGIN_SRC emacs-lisp
(require 'evil-leader)
(global-evil-leader-mode)
;; set space as leader-key
(evil-leader/set-leader "<SPC>")
#+END_SRC

** evil

#+BEGIN_SRC emacs-lisp
;; use evil search instead of isearch
(setq evil-search-module 'evil-search)
(require 'evil)
(evil-mode 1)
;; let evil treat _ as part of a word
(setq-default evil-symbol-word-search t)
#+END_SRC

** org-mode                                                        :builtin:

#+BEGIN_SRC emacs-lisp
;; org-mode for .org-files
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
;; required by require
(setq org-log-done t)
;; setup priorities from A-Z
(setq org-highest-priority ?A)
(setq org-lowest-priority ?Z)
(setq org-default-priority ?A)
;; define states
(setq org-todo-keywords
       '((sequence "TODO" "NEXT" "BLOCKED" "|" "DONE")))
;; concat agenda from this files
(setq org-agenda-files (append '("~/.notes.org" "~/Documents/org/plan/agenda.org") (file-expand-wildcards "~/Documents/org/cal/*\.org")))

;; indentation options
(setq org-startup-folded "showeverything")
;; In this minor mode, all lines are prefixed for display with the necessary amount of space.
;; All headline stars but the last one are made invisible
(add-hook 'org-mode-hook
          (lambda () (org-indent-mode t)) t)

;; initial langauges for org-babel support
(org-babel-do-load-languages
    'org-babel-load-languages '(
        (sh . t)
        (python . t)
        (ruby . t)
        (sqlite . t)
        (java . t)
        (js . t)
        (sql . t)
        (css . t)
))

;; automatically insert list items
;; required by require
(add-hook 'org-mode-hook (lambda () (org-autolist-mode)))

;; org-capture
(setq org-default-notes-file "~/Documents/org/backlog.org")

(setq org-capture-templates
'(("t" "Todo" entry (file "~/Documents/org/backlog.org")
        "* TODO %?")))
#+END_SRC

** python

#+BEGIN_SRC emacs-lisp :tangle yes
;(setq python-shell-interpreter "ipython"
;      python-shell-interpreter-args "--simple-prompt --pprint")
(setq python-shell-interpreter "ipython")

(defun python-shell ()
        "Start and/or switch to the REPL."
        (interactive)
        (let ((shell-process
               (or (python-shell-get-process)
                   ;; `run-python' has different return values and different
                   ;; errors in different emacs versions. In 24.4, it throws an
                   ;; error when the process didn't start, but in 25.1 it
                   ;; doesn't throw an error, so we demote errors here and
                   ;; check the process later
                   (with-demoted-errors "Error: %S"
                     ;; in Emacs 24.5 and 24.4, `run-python' doesn't return the
                     ;; shell process
                     (call-interactively #'run-python)
                     (python-shell-get-process)))))
          (unless shell-process
            (error "Failed to start python shell properly"))
          (pop-to-buffer (process-buffer shell-process))
          'anaconda-mode
          'anaconda-eldoc-mode
          (evil-insert-state)))
#+END_SRC

** anaconda-mode

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'python-mode-hook 'anaconda-mode)
(add-hook 'python-mode-hook 'anaconda-eldoc-mode)
#+END_SRC

** company-anaconda

#+BEGIN_SRC emacs-lisp :tangle yes
(eval-after-load "company"
 '(add-to-list 'company-backends 'company-anaconda))

(add-hook 'python-mode-hook 'anaconda-mode)
#+END_SRC

** company-tern

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'js2-mode-hook 'tern-mode)
(eval-after-load "company"
 '(add-to-list 'company-backends 'company-tern))
#+END_SRC

** helm

#+BEGIN_SRC emacs-lisp
(require 'helm-config)
;; TODO experimental
(setq helm-M-x-fuzzy-match t
      helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match t)
#+END_SRC

** flycheck

#+BEGIN_SRC emacs-lisp
;; TODO only init for src files
;; required by require
(add-hook 'after-init-hook #'global-flycheck-mode)
;; TODO customize error window
#+END_SRC

** yasnippet

#+BEGIN_SRC emacs-lisp
;; yasnippet everywhere
(yas-global-mode 1)

;; required by require
;; snippet direcories
;; ~/emacs.d/elpa/yasnippet-20161022.646/snippets
;; ~/emacs.d/snippets
#+END_SRC

** git-gutter

#+BEGIN_SRC emacs-lisp
;; required by require
(global-git-gutter-mode +1)
; live update
(custom-set-variables
    '(git-gutter:update-interval 1)
    '(git-gutter:modified-sign "~")
    ; '(git-gutter:added-sign "+")
    ; '(git-gutter:deleted-sign "-")
)
#+END_SRC

** undo-tree

#+BEGIN_SRC emacs-lisp
;; required by require
(global-undo-tree-mode)
#+END_SRC

** company-mode

Basically it sets up the yasnippet backend with every other backend you have activated, so you get the proper completion for the corresponding backend as well as your snippets.

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)

;; fix the company popup (80-column-ruler break it)
(defun on-off-fci-before-company(command)
  (when (string= "show" command)
    (turn-off-fci-mode))
  (when (string= "hide" command)
    (turn-on-fci-mode)))

(advice-add 'company-call-frontends :before #'on-off-fci-before-company)

;; complete with tab
;(defun complete-or-indent ()
;    (interactive)
;    (if (company-manual-begin)
;        (company-complete-common)
;        (indent-according-to-mode)))

;; ;; Add yasnippet support for all company backends
;; ;; https://github.com/syl20bnr/spacemacs/pull/179
;; (defvar company-mode/enable-yas t
;;   "Enable yasnippet for all backends.")
;;
;; (defun company-mode/backend-with-yas (backend)
;;   (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
;;       backend
;;     (append (if (consp backend) backend (list backend))
;;             '(:with company-yasnippet))))
;;
;; (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
#+END_SRC

** auto-complete

#+BEGIN_SRC emacs-lisp
;; (require 'auto-complete)
;; ;; TODO deactivate for minibuffer
;; (global-auto-complete-mode t)
;; (ac-config-default)
;; (setq ac-sources (append '(ac-source-yasnippet) ac-sources))
#+END_SRC

** jedi                                                             :manual:
M-x jedi:install-server

#+BEGIN_SRC emacs-lisp
;(add-hook 'python-mode-hook 'jedi:setup)
;(setq jedi:complete-on-dot t)
#+END_SRC

** json-snatcher

#+BEGIN_SRC emacs-lisp
;; required by require
(defun js-mode-bindings ()
"Sets a hotkey for using the json-snatcher plugin"
    (when (string-match  "\\.json$" (buffer-name))
        ;;; TODO map @ mappings
    (local-set-key (kbd "C-c C-g") 'jsons-print-path)))
(add-hook 'js-mode-hook 'js-mode-bindings)
(add-hook 'js2-mode-hook 'js-mode-bindings)
#+END_SRC

** nyan-mode                                                        :manual:

depends on https://github.com/TeMPOraL/nyan-mode.git
expected at [[~/.emacs.d/other-srcs/nyan-mode][nyan-mode]]
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name
    (concat user-emacs-directory "other-srcs/nyan-mode")))
(require 'nyan-mode)
(nyan-mode)
#+END_SRC

** js2-mode

#+BEGIN_SRC emacs-lisp
(require 'js2-mode)
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
;; TODO test indentation
(custom-set-variables
 '(js2-basic-offset 4)
 '(js2-bounce-indent-p t)
)
#+END_SRC

** skewer-mode

#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'js2-mode-hook 'skewer-mode)
(add-hook 'css-mode-hook 'skewer-css-mode)
(add-hook 'html-mode-hook 'skewer-html-mode)
#+END_SRC

** web-mode

#+BEGIN_SRC emacs-lisp
(require 'web-mode)

(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

;; highlight matching tags
;; TODO: do it like vims match-tag-always
(setq web-mode-enable-current-element-highlight t)

(defun my-web-mode-hook ()
  "Hooks for Web mode."
  (setq web-mode-markup-indent-offset 2)
)
(add-hook 'web-mode-hook  'my-web-mode-hook)
#+END_SRC

** evil-surround

#+BEGIN_SRC emacs-lisp
(require 'evil-surround)
(global-evil-surround-mode 1)
#+END_SRC

** which-key

#+BEGIN_SRC emacs-lisp
(require 'which-key)
(which-key-mode)
#+END_SRC

** TODO smart-mode-line

decide

 #+BEGIN_SRC emacs-lisp :tangle no
(setq powerline-arrow-shape 'curve)
(setq powerline-default-separator-dir '(right . left))
(setq sml/theme 'powerline)
(sml/setup)
 #+END_SRC

** spaceline

#+BEGIN_SRC emacs-lisp
(require 'spaceline-config)
(spaceline-spacemacs-theme)
#+END_SRC

** evil-search-highlight-persist                                     :bloat:

#+BEGIN_SRC emacs-lisp
;; TODO requrie
(require 'highlight)
(require 'evil-search-highlight-persist)
(global-evil-search-highlight-persist t)

;; TODO set highlight color
;; https://github.com/juanjux/evil-search-highlight-persist/issues/1
;; (defface evil-search-highlight-persist-highlight-face
;;   '((((class color))
;;      (:background "turquoise")))
;;   "Face for the highlighted text."
;;   :group 'evil-search-highlight-persist)
#+END_SRC

** workgroups2

#+BEGIN_SRC emacs-lisp
(require 'workgroups2)
;; change workgroups session file
(setq wg-session-file (concat user-emacs-directory "persistence/workgroups"))
;; load it on startup
(workgroups-mode 1)
(wg-find-session-file (concat user-emacs-directory "persistence/workgroups"))
#+END_SRC

** recentf                                                         :builtin:

persist mru files

#+BEGIN_SRC emacs-lisp
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 50)
;; set file location
(setq recentf-save-file (expand-file-name
    (concat user-emacs-directory "persistence/recentf")))
#+END_SRC

** howdoi

become a full StackOverflow developer!

#+BEGIN_SRC emacs-lisp
(setq helm-howdoi
  '((name . "howdoi google")
    (candidates . (lambda ()
                    (funcall helm-google-suggest-default-function)))
    (action . (("howdoi" . howdoi-query)))
    (volatile)
    (requires-pattern . 3)
    (delayed)))
#+END_SRC

** markdown-mode

#+BEGIN_SRC emacs-lisp
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(autoload 'gfm-mode "markdown-mode"
   "Major mode for editing GitHub Flavored Markdown files" t)
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
#+END_SRC

** eshell
fancy eshell prompt with different colors, time, pwd, version control info and horizontal line after each command.

#+BEGIN_SRC emacs-lisp
;; prompt with colors, time, pwd, vc info and horizontal line after cmds
(defmacro with-face (str &rest properties)
    `(propertize ,str 'face (list ,@properties)))

(defun shk-eshell-prompt ()
    (let ((header-bg "#fff"))
    (concat
    (with-face (format-time-string "(%Y-%m-%d %H:%M) " (current-time)) :background header-bg :foreground "#888")
    (with-face
        (or (ignore-errors (format "(%s)" (vc-responsible-backend default-directory))) "")
        :background header-bg)
    (with-face "\n" :background header-bg)
    (with-face user-login-name :foreground "blue")
    "@"
    (with-face "localhost" :foreground "green")
    (if (= (user-uid) 0)
        (with-face " #" :foreground "red")
        " $")
    " ")))
(setq eshell-prompt-function 'shk-eshell-prompt)
(setq eshell-highlight-prompt nil)
#+END_SRC

** company-emoji

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name
    (concat user-emacs-directory "other-srcs/company-emoji")))
(require 'company-emoji)

(add-to-list 'company-backends 'company-emoji)

;; macOS font
(set-fontset-font
 t 'symbol
 (font-spec :family "Apple Color Emoji") nil 'prepend)
#+END_SRC

** projectile

#+BEGIN_SRC emacs-lisp
(require 'projectile)
(projectile-mode)
#+END_SRC

** google-translate

#+BEGIN_SRC emacs-lisp
(setq google-translate-default-source-language "en"
      google-translate-default-target-language "de")
#+END_SRC

** smartparens

replaced by electric-pair-mode
#+BEGIN_SRC emacs-lisp
;; (require 'smartparens-config)
;; (add-hook 'js-mode-hook #'smartparens-mode)
;; (add-hook 'python-mode-hook #'smartparens-mode)
#+END_SRC+END_SRC

** avy

only use the current window for candidates.
#+BEGIN_SRC emacs-lisp
    (setq avy-all-windows nil)
#+END_SRC

** new package

#+BEGIN_SRC emacs-lisp
#+END_SRC

* require

lazy require packages

#+BEGIN_SRC emacs-lisp
(require 'idle-require)             ; Needed in order to use idle-require

(dolist (feature
         '(auto-compile             ; auto-compile .el files
           google-translate
           google-translate-default-ui
           zone
           expand-region
           fireplace
           json-snatcher
           undo-tree
           yasnippet
           helm-c-yasnippet
           ;; auto-complete-config
           git-gutter
           org-mode
           org-autolist
           ;; always load finally
           ox-rst
           ox-odt
           ox-md                       ; Markdown exporter (from org)
           ;; matlab                   ; matlab-mode
           ;; ob-matlab                ; org-babel matlab
           ;; ox-latex                 ; the latex-exporter (from org)
           ;; recentf                  ; recently opened files
           ;; tex-mode))               ; TeX, LaTeX, and SliTeX mode commands
           ))
  (idle-require feature))

(setq idle-require-idle-delay 5)
(idle-require-mode 1)
#+END_SRC

* functions

** yank line without newline
#+BEGIN_SRC elisp
    (defun copy-line ()
        (interactive)
            (save-excursion
              (back-to-indentation)
              (kill-ring-save
               (point)
               (line-end-position)))
               (message "1 line copied"))
#+END_SRC

** daily journal
#+begin_src elisp
    (defun daily ()
        "setup journal windows and buffers"
        (interactive)
        (delete-other-windows)
        (find-file "~/Documents/org/journal.org")
        (split-window-right)
        (evil-window-right 1)
        (find-file "~/Documents/org/agenda.org")
        (evil-window-left 1)
        (evil-goto-first-line)
        (evil-open-above 0)
        (evil-open-above 0)
        (insert "day")
        (yas-expand))
#+end_src

** toggle word case
#+begin_src elisp
(defun toggle-word-case ()
  "Toggle the letter case of current word or text selection.
Always cycle in this order: Init Caps, ALL CAPS, all lower.

URL `http://ergoemacs.org/emacs/modernization_upcase-word.html'
Version 2016-01-08"
  (interactive)
  (let (
        (deactivate-mark nil)
        -p1 -p2)
    (if (use-region-p)
        (setq -p1 (region-beginning)
              -p2 (region-end))
      (save-excursion
        (skip-chars-backward "[:alnum:]")
        (setq -p1 (point))
        (skip-chars-forward "[:alnum:]")
        (setq -p2 (point))))
    (when (not (eq last-command this-command))
      (put this-command 'state 0))
    (cond
     ((equal 0 (get this-command 'state))
      (upcase-initials-region -p1 -p2)
      (put this-command 'state 1))
     ((equal 1  (get this-command 'state))
      (upcase-region -p1 -p2)
      (put this-command 'state 2))
     ((equal 2 (get this-command 'state))
      (downcase-region -p1 -p2)
      (put this-command 'state 0)))))
#+end_src

** recreate scratch buffer
#+BEGIN_SRC emacs-lisp
(defun create-scratch-buffer nil
    "create a scratch buffer"
    (interactive)
    (switch-to-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode))
#+END_SRC

** copy file name to clipboard

#+BEGIN_SRC emacs-lisp
(defun copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC

** evil shifting (< / >)
prevent losing the selection after a shift operation by re-selecting

#+BEGIN_SRC emacs-lisp
(defun evil-shift-left-visual ()
  (interactive)
  (evil-shift-left (region-beginning) (region-end))
  (evil-normal-state)
  (evil-visual-restore))

(defun evil-shift-right-visual ()
  (interactive)
  (evil-shift-right (region-beginning) (region-end))
  (evil-normal-state)
  (evil-visual-restore))
#+END_SRC

** source init.el

#+BEGIN_SRC emacs-lisp
(defun src-init ()
    (interactive)
    (load-file (concat user-emacs-directory "init.el")))
#+END_SRC

** helm-howdoi

#+BEGIN_SRC emacs-lisp
(defun helm-howdoi ()
    (interactive)
    (helm :sources 'helm-howdoi))
#+END_SRC

** new function

#+BEGIN_SRC emacs-lisp
#+END_SRC

* keybindings keymappings

#+BEGIN_SRC emacs-lisp
  ;; minor mode for keybindings
  (
   defvar my-keys-minor-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "M-+") 'text-scale-adjust)
      (define-key map (kbd "M--") 'text-scale-adjust)
      (define-key map (kbd "M-0") 'text-scale-adjust)
      (define-key map (kbd "M-e") 'move-end-of-line)
      (define-key map (kbd "M-b") 'move-beginning-of-line)
      ;; macOS
      (define-key map (kbd "M-q") 'save-buffers-kill-terminal)        ; quit
      (define-key map (kbd "M-w") 'kill-buffer)                       ; close
      (define-key map (kbd "M-c") 'kill-ring-save)                    ; copy
      (define-key map (kbd "M-v") 'yank)                              ; paste
      (define-key map (kbd "M-s") 'save-buffer)                       ; save
      (define-key map (kbd "M-a") 'mark-whole-buffer)                 ; select all
      (define-key map (kbd "M-x") 'helm-M-x)
      (define-key map (kbd "\C-cl") 'org-store-link)
      (define-key map (kbd "\C-ca") 'org-agenda)
      (define-key map (kbd "C-+") 'er/expand-region)
      ;; TOOD Backspace?
      (define-key map (kbd "DEL") 'backward-delete-char)
      (define-key map (kbd "C--") 'evilnc-comment-or-uncomment-lines)

      ;; evil keymappings
      ;; normal state
      (define-key evil-normal-state-map (kbd "M-o") 'helm-find-files)
      (define-key evil-normal-state-map (kbd "M-b") 'helm-buffers-list)
      (define-key evil-normal-state-map (kbd "+") 'er/expand-region)
      (define-key evil-normal-state-map (kbd "f") 'ace-jump-mode)
      (define-key evil-normal-state-map (kbd "B") 'evil-first-non-blank)
      (define-key evil-normal-state-map (kbd "E") 'evil-end-of-line)
      (define-key evil-normal-state-map (kbd "-") 'evilnc-comment-or-uncomment-lines)
      ;; (define-key evil-normal-state-map (kbd "ä") 'delete-other-windows)
      ;; (define-key evil-normal-state-map (kbd "Ä") 'evil-search-highlight-persist-remove-all)
      (define-key evil-normal-state-map (kbd "ö") 'avy-goto-line)
      (define-key evil-normal-state-map (kbd "Ö") 'avy-goto-char)
      (define-key evil-normal-state-map (kbd "f") 'avy-goto-char-timer)
      (define-key evil-normal-state-map (kbd "F") 'avy-goto-char-in-line)
      (define-key evil-normal-state-map (kbd "C-j") 'scroll-up-command)
      (define-key evil-normal-state-map (kbd "C-k") 'scroll-down-command)
      (define-key evil-normal-state-map (kbd "~") 'toggle-word-case)
      (define-key evil-normal-state-map (kbd "º") 'evil-forward-paragraph)      ;; <alt-j>
      (define-key evil-normal-state-map (kbd "∆") 'evil-backward-paragraph)     ;; <alt-k>
      (define-key evil-normal-state-map (kbd "U") 'delete-backward-char)
      (define-key evil-normal-state-map (kbd "u") 'undo-tree-undo)
      (define-key evil-normal-state-map (kbd "Y") 'copy-line)

      ;; visual line
      (define-key evil-visual-state-map (kbd "-") 'evilnc-comment-or-uncomment-lines)
      ; Overload shifts so that they don't lose the selection
      (define-key evil-visual-state-map (kbd ">") 'evil-shift-right-visual)
      (define-key evil-visual-state-map (kbd "<") 'evil-shift-left-visual)
      (define-key evil-visual-state-map [tab] 'evil-shift-right-visual)
      (define-key evil-visual-state-map [S-tab] 'evil-shift-left-visual)
      (define-key evil-visual-state-map (kbd "B") 'evil-first-non-blank)
      (define-key evil-visual-state-map (kbd "E") 'evil-end-of-line)

      ;; evil-leader mappings
      (evil-leader/set-key
      "/" 'evil-command-window-search-forward
      "|" 'split-window-right
      "-" 'split-window-below
      "k" 'evil-window-up
      "j" 'evil-window-down
      "h" 'evil-window-left
      "l" 'evil-window-right
      "x" 'delete-other-windows    ; duplicated
      "y" 'helm-yas-complete
      "f" 'helm-for-files
      "a" 'helm-ag-project-root
      "O" 'helm-find-files
      "oh" 'helm-org-in-buffer-headings
      "oa" 'helm-org-agenda-files-headings
      "oc" 'org-capture
      "or" 'org-reset-checkbox-state-subtree
      "oe" 'org-export-dispatch
      "ota" 'org-time-stamp
      "oti" 'org-time-stamp-inactive
      "SPC" 'helm-buffers-list
      "bb" 'bookmark-set
      "bp" 'projectile-add-known-project
      "gn" 'git-gutter:next-hunk
      "gp" 'git-gutter:previous-hunk
      "gs" 'helm-google-suggest
      "v" 'visual-line-mode
      "TAB" 'mode-line-other-buffer               ; previous buffer (like 'helm-buffer-list "RET")
      "D" 'dumb-jump-go
      "d" 'anaconda-mode-show-doc
      "*" 'helm-swoop
      "ö" 'evil-search-highlight-persist-remove-all        ; duplicated
      "p" 'helm-projectile
      "P" 'helm-projectile-find-file-in-known-projects
      "sp" 'projectile-switch-project
      ;; TOTEST
      "A" 'helm-projectile-ag
      "m" 'magit-status
      "nn" 'find-file
      "ns" 'create-scratch-buffer
      "ss" 'wg-save-session
      "so" 'wg-open-session
      "sc" 'wg-save-session-as
      "S" 'src-init
      "r" 'revert-buffer
      "C" 'shell-command
      "ci" 'org-clock-in
      "co" 'org-clock-out
      "cl" 'org-clock-in-last
      "cs" 'org-clock-select-task
      "i" 'python-shell
      "Hh" 'helm-howdoi
      "Hi" 'howdoi-query-insert-code-snippet-at-point
      "tl" 'helm-semantic-or-imenu
      "tt" 'google-translate-at-point
      "tq" 'google-translate-query-translate
      ;; "t" (lambda () (interactive) (evil-ex "%s /foo/bar/g"))
      "w/" 'find-file-other-window)

      ;; macOS
      ;; map command key to meta
      (if (boundp 'ns-command-modifier)
          (setq ns-command-modifier 'meta))
      (if (boundp 'ns-option-modifier)
          (setq ns-option-modifier nil))

      ;; make use of <Meta-Up> <Meta-Down>
      ;; TODO double mapped
      (define-key input-decode-map "\e\eOA" [(meta up)])
      (define-key input-decode-map "\e\eOB" [(meta down)])
      (global-set-key [(meta up)] 'scroll-down-command)
      (global-set-key [(meta down)] 'scroll-up-command)

      map)
    "my-keys-minor-mode keymap.")

  (define-minor-mode my-keys-minor-mode
    "A minor mode so that my key settings override annoying major modes."
    :init-value t
    :lighter " my-keys")

  (my-keys-minor-mode 1)


  ;; (template insertion
  ;; TODO use yasnippet
  (defun insert-org-checkbox ()
    (interactive)
    (insert "- [ ] "))
  (global-set-key (kbd "M--") 'insert-checkbox)

  (defun insert-org-minimal-theme ()
    (interactive)
      (insert "#+SETUPFILE: ~/Settings/dotfiles/org-minimal-theme.setup"))

  (defun insert-org-title ()
    (interactive)
    (insert "#+TITLE: "))

  (defun insert-src ()
    (interactive)
    (insert "#+BEGIN_SRC emacs-lisp\n\n#+END_SRC"))
#+END_SRC

* Meta
** Todos
*** bugs
**** evil paste into /
**** Whitespace!!!!!
**** persistence
***** projectile persist known projects
***** default persistence files
**** #-files
**** undo-tree + fireplace
**** git gutter lag
*** basics
**** jumplist prestist
**** jumplist helm
**** Tabs
- 4 auf einmal löschen
- 4 auf einmal überspringen
- smart tabs
**** Encryption
**** mode-line
***** git infos
***** Sprache
**** emojis
https://github.com/iqbalansari/emacs-emojify
**** TODO FIXME BUG highlighten
http://emacs-fu.blogspot.de/2008/12/highlighting-todo-fixme-and-friends.html
**** Code folding
**** Splits
**** MRU persistent
**** Projects
**** Bookmarks
**** startify
**** big file handling
**** named regexes
  "t" (lambda () (interactive) (evil-ex "%s /foo/bar/g"))
  as helm list
***** store commands
I generally like writing custom commands, here's the one for your first replacement:

(defun replace-plus-minus ()
  (interactive)
  (replace-string "±" "\\pm" nil (point-min) (point-max)))
But, you can also use keyboard macros. Check out the wiki and docs.

Basically, you'd do:

C-x ( M-x replace-string ± RET \pm RET C-x )
Then you can name it, and save it to your .emacs:

M-x name-last-kbd-macro
M-x insert-kbd-macro

**** zooming
http://oremacs.com/2015/01/14/repeatable-commands/

*** flycheck

*** yasnippet

*** evil
**** g; persistieren
**** P insert with \n
**** Defining your own escape
https://www.emacswiki.org/emacs/Evil#toc16

*** org-mode
**** archive
**** capture
**** Wetter
**** Gcal
**** keybindings
***** new subheadline

*** auto-complete
https://github.com/auto-complete/auto-complete
**** python
- jedi
**** javascript
**** directories

*** magit
https://github.com/justbur/evil-magit

*** spacemacs
**** spaceline
Anzu shows the number of occurrence when performing a search. Spacemacs integrates nicely the Anzu status by displaying it temporarily when n or N are being pressed. See the 5/6 segment on the screenshot below.
When Flycheck minor mode is enabled, a new element appears in modeline showing the number of errors, warnings and info.

*** Vim
https://github.com/Valloric/MatchTagAlways
https://github.com/redguardtoo/evil-matchit

*** other
https://github.com/edkolev/evil-goggles
php auto yasnippet
auto-yasnippet
https://github.com/pidu/git-timemachine
https://org-trello.github.io/
https://github.com/darksmile/cheatsheet
https://github.com/soutaro/hungry-delete.el
https://github.com/mrkkrp/fix-word
https://github.com/areina/helm-dash
https://github.com/cadadr/forecast.el

https://github.com/redguardtoo/cliphist


https://www.quora.com/What-are-some-of-the-most-useful-extensions-for-Emacs
https://www.reddit.com/r/emacs/comments/42g6u9/what_are_some_lesserknown_packages_that_you_love/
https://news.ycombinator.com/item?id=9395271
https://www.reddit.com/r/vim/comments/2ezvst/why_cant_vim_to_be_appealing_like_emacs/
https://www.reddit.com/r/emacs/comments/1xjlrq/emacs_modes_that_are_worth_knowing_about/

http://cedet.sourceforge.net/
http://js-comint-el.sourceforge.net/
https://github.com/abo-abo/hydra
https://github.com/fniessen/org-html-themes
https://github.com/konr/tomatinho
https://github.com/krisajenkins/helm-spotify
https://github.com/lewang/flx
https://github.com/mrkkrp/zzz-to-char
https://github.com/nonsequitur/smex/
https://github.com/quelpa/quelpa
https://github.com/rejeep/prodigy.el
https://github.com/repl-electric/view-pane/tree/master/animations
https://github.com/skeeto/elfeed
https://github.com/steckerhalter/helm-google
https://github.com/timcharper/evil-surround
https://github.com/zk-phi/indent-guide
https://www.emacswiki.org/emacs/ElDoc
https://github.com/skeeto/joymacs
https://github.com/yati-sagade/orch
https://github.com/zk-phi/phi-grep
**** ispell
https://www.emacswiki.org/emacs/InteractiveSpell
**** stack exchange
https://github.com/vermiculus/sx.el
**** ctags
**** Dash
**** eclim
**** DB Client
**** fzf
**** elpy?
https://github.com/jorgenschaefer/elpy
**** Gcal
**** rainbow parens
**** artistmode
https://www.emacswiki.org/emacs/ArtistMode
**** paredit
http://danmidwood.com/content/2014/11/21/animated-paredit.html


*** Themes
**** unported vim themes
https://github.com/joedf/PlasticCodeWrap
https://github.com/rakr/vim-two-firewatch
https://github.com/raphamorim/lucario
https://github.com/tyrannicaltoucan/vim-deep-space
**** previews
**** own
https://github.com/emacsfodder/emacs-theme-editor

** Cheatsheet
*** paredit
*** Yasnippet
*** Dired

** Ressources
*** Learn
https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/
https://www.emacswiki.org/emacs/KeyboardMacros
http://tuhdo.github.io/emacs-tutor.html
http://emacs-doctor.com/learn-emacs-lisp-in-15-minutes.html
https://github.com/redguardtoo/mastering-emacs-in-one-year-guide
https://github.com/noctuid/evil-guide

http://www.howardism.org/Technical/Emacs/emacs-init.html
https://github.com/gabrielelanaro/emacs-for-python
http://tuhdo.github.io/helm-intro.html
https://github.com/larstvei/dot-emacs/blob/master/init.org
https://www.emacswiki.org/emacs/EmacsNiftyTricks
http://danmidwood.com/content/2014/11/21/animated-paredit.html
https://joaotavora.github.io/yasnippet/snippet-development.html
https://www.youtube.com/watch?v=HKF41ivkBb0
https://tuhdo.github.io/helm-intro.html
http://sachachua.com/blog/wp-content/uploads/2013/05/How-to-Learn-Emacs-v2-Large.png

http://www.gigamonkeys.com/book/

*** Sites
https://www.gnu.org/software/emacs/
https://www.reddit.com/r/emacs/
http://ergoemacs.org/
https://emacswiki.org/
http://wikemacs.org/wiki/Main_Page
http://emacs-fu.blogspot.de/
http://emacsredux.com/
http://emacs.sexy/
http://sachachua.com/blog/
http://endlessparentheses.com/

*** Lists
http://emacsrocks.com/
https://github.com/emacs-tw/awesome-emacs
https://github.com/search?o=desc&q=emacs&s=stars&type=Repositories&utf8=%E2%9C%93
http://emacsrocks.com/

*** Themes
https://emacsthemes.com/
https://pawelbx.github.io/emacs-theme-gallery/
https://github.com/owainlewis/emacs-color-themes

*** Distros
http://spacemacs.org/
https://github.com/bbatsov/prelude
https://github.com/overtone/emacs-live
https://github.com/technomancy/emacs-starter-kit
https://github.com/purcell/emacs.d
http://aquamacs.org/
https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org
https://ogbe.net/emacsconfig.html
